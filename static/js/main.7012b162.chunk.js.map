{"version":3,"sources":["App.js","index.js"],"names":["App","props","onHackerNewsToggled","setState","hackerNews","state","onWeatherToggled","weather","renderContent","store","getHackerNews","getWeather","_hackerNews","createStore","enhancements","offline","offlineConfig","extensions","getSagaExtension","className","type","onChange","this","LoadableHackerNews","Loadable","loader","loading","_weather","LoadableWeather","Component","ReactDOM","render","document","getElementById"],"mappings":"6RAwGeA,E,YA3FX,WAAYC,GAAQ,IAAD,8BAEf,4CAAMA,KAoCVC,oBAAsB,WAClB,EAAKC,SAAS,CAAEC,YAAa,EAAKC,MAAMD,cAvCzB,EAyCnBE,iBAAmB,WACf,EAAKH,SAAS,CAAEI,SAAU,EAAKF,MAAME,WA1CtB,EA6CnBC,cAAgB,WACZ,OAGI,kBAAC,WAAD,CAAUC,MAAO,EAAKA,OAClB,oCACK,EAAKC,gBACL,EAAKC,gBApDH,EAyDnBC,YAAc,KApDV,EAAKP,MAAQ,CACTD,YAAY,EACZG,SAAS,GAQb,EAAKE,MAAQI,sBAAY,CACrBC,aAAc,CAACC,kBAAQC,MACvBC,WAAY,CAACC,gCAjBF,E,sEAsBf,OACI,yBAAKC,UAAU,OACX,uCACA,yBAAKA,UAAU,cACX,2BACIC,KAAK,WACLC,SAAUC,KAAKpB,sBAEnB,8CACA,2BAAOkB,KAAK,WAAWC,SAAUC,KAAKhB,mBACtC,2CAEJ,yBAAKa,UAAU,WAAWG,KAAKd,oB,sCAyBvC,IAAKc,KAAKjB,MAAMD,WACZ,OAAO,KAGX,GAAIkB,KAAKV,YACL,OAAOU,KAAKV,YAGhB,IAAMW,EAAqBC,IAAS,CAChCC,OAAQ,kBAAM,4DACdC,QAAS,kBAAM,sDAGnB,OADAJ,KAAKV,YAAc,kBAACW,EAAD,MACZD,KAAKV,c,mCAGZ,IAAKU,KAAKjB,MAAME,QACZ,OAAO,KAEX,GAAIe,KAAKK,SACL,OAAOL,KAAKK,SAGhB,IAAMC,EAAkBJ,IAAS,CAC7BC,OAAQ,kBAAM,qDACdC,QAAS,kBAAM,sDAGnB,OADAJ,KAAKK,SAAW,kBAACC,EAAD,MACTN,KAAKK,a,GAxFFE,aCRlBC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.7012b162.chunk.js","sourcesContent":["import { offline } from \"@redux-offline/redux-offline\"\r\nimport offlineConfig from \"@redux-offline/redux-offline/lib/defaults\";\r\nimport React, { Component } from \"react\";\r\n// We will load the widgets async using react-loadable.\r\nimport Loadable from \"react-loadable\";\r\nimport { Provider } from \"react-redux\";\r\n// createStore allows us to load/unload modules dynamically.\r\nimport { createStore } from \"redux-dynamic-modules-core\";\r\n// Saga extension allows us to use Saga middleware in the module store.\r\nimport { getSagaExtension } from \"redux-dynamic-modules-saga\";\r\n// Thunk extension allows us to use Thunk middleware in the module store.\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        \r\n        super(props);\r\n\r\n        // define the initial state where none of the widgets are visible\r\n        this.state = {\r\n            hackerNews: false,\r\n            weather: false,\r\n        };\r\n\r\n        /**\r\n         * configure the store and load the thunk and saga extension\r\n         * The extensions are optional and you can choose extension based on the middleware you use\r\n         * You can also build your own extensions for any other middleware e.g. redux-observable\r\n         */\r\n        this.store = createStore({\r\n            enhancements: [offline(offlineConfig)],\r\n            extensions: [getSagaExtension()],\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>Widgets</h1>\r\n                <div className=\"checkboxes\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        onChange={this.onHackerNewsToggled}\r\n                    />\r\n                    <label>Hacker News</label>\r\n                    <input type=\"checkbox\" onChange={this.onWeatherToggled} />\r\n                    <label>Weather</label>\r\n                </div>\r\n                <div className=\"widgets\">{this.renderContent()}</div>\r\n            </div>\r\n        );\r\n    }\r\n    onHackerNewsToggled = () => {\r\n        this.setState({ hackerNews: !this.state.hackerNews });\r\n    };\r\n    onWeatherToggled = () => {\r\n        this.setState({ weather: !this.state.weather });\r\n    };\r\n\r\n    renderContent = () => {\r\n        return (\r\n            // Pass the configured store to redux Provider\r\n            // and render the widgets based on the state\r\n            <Provider store={this.store}>\r\n                <>\r\n                    {this.getHackerNews()}\r\n                    {this.getWeather()}\r\n                </>\r\n            </Provider>\r\n        );\r\n    }; \r\n    _hackerNews = null;\r\n    getHackerNews() {\r\n        if (!this.state.hackerNews) {\r\n            return null;\r\n        }\r\n\r\n        if (this._hackerNews) {\r\n            return this._hackerNews;\r\n        }\r\n\r\n        const LoadableHackerNews = Loadable({\r\n            loader: () => import(\"./news\"),\r\n            loading: () => <div>Loading Scripts...</div>,\r\n        });\r\n        this._hackerNews = <LoadableHackerNews />;\r\n        return this._hackerNews;\r\n    }\r\n    getWeather() {\r\n        if (!this.state.weather) {\r\n            return null;\r\n        }\r\n        if (this._weather) {\r\n            return this._weather;\r\n        }\r\n\r\n        const LoadableWeather = Loadable({\r\n            loader: () => import(\"./weather\"),\r\n            loading: () => <div>Loading Scripts...</div>,\r\n        });\r\n        this._weather = <LoadableWeather />;\r\n        return this._weather;\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById(\"root\")\r\n)"],"sourceRoot":""}