{"version":3,"sources":["weather/component/ComponentWeather.js","weather/redux/actions.js","weather/redux/reducer.js","weather/redux/sagas.js","weather/index.js","weather/redux/module.js"],"names":["ConnectedWeather","connect","state","weatherState","weather","name","temperature","Math","round","main","temp","description","loading","weatherLoaded","type","payload","weatherReducer","action","produce","draft","weatherSaga","loadWeatherData","call","fetch","response","json","put","Dynamic","modules","id","reducerMap","sagas"],"mappings":"uIA6BaA,EAAmBC,mBAbR,SAAAC,GACpB,OAAKA,EAAMC,cAAiBD,EAAMC,aAAaC,QAKxC,CACHC,KAAMH,EAAMC,aAAaC,QAAQC,KACjCC,YAAaC,KAAKC,MAAMN,EAAMC,aAAaC,QAAQK,KAAKC,KAAO,KAC/DC,YAAaT,EAAMC,aAAaC,QAAQA,QAAQ,GAAGO,aAP5C,CACHC,SAAS,KAUWX,EA1BhB,SAAC,GAA+C,IAA9CW,EAA6C,EAA7CA,QAASP,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,YAAaK,EAAiB,EAAjBA,YAC1C,OAAIC,EACO,oDAGP,6BACI,4BAAKP,GACL,6BAAMM,GACN,6BAAML,EAAN,c,QCTCO,EAAgB,SAAAT,GACzB,MAAO,CACHU,KAJsB,wBAKtBC,QAASX,ICFJY,EAAiB,WAAyB,IAAxBd,EAAuB,uDAAf,GAAIe,EAAW,uCAClD,OAAOC,YAAQhB,GAAO,SAAAiB,GAClB,OAAOF,EAAOH,MACV,IDNkB,wBCOdK,EAAMf,QAAUa,EAAOF,QACvB,MAEJ,QACI,OAAOb,O,qCCRNkB,G,WAIPC,GAJH,SAAUD,IAAV,iEACH,OADG,SACGE,YAAKD,GADR,uCAIP,SAAUA,IAAV,yEAGqB,MAFL,mGADhB,SAG2BC,YAAKC,MAFhB,oGADhB,OAIiB,OADPC,EAHV,gBAIuBF,YAAK,CAACE,EAAUA,EAASC,OAJhD,OAKI,OADMA,EAJV,gBAKUC,YAAIb,EAAcY,IAL5B,uC,aCFe,SAASE,IACpB,OACI,kBAAC,sBAAD,CAAqBC,QAAS,CCH3B,CACHC,GAAI,UACJC,WAAY,CACR3B,aAAca,GAElBe,MAAO,CAACX,MDDJ,kBAACpB,EAAD,OARZ","file":"static/js/6.3258ff20.chunk.js","sourcesContent":["import { connect } from 'react-redux';\r\nimport React from 'react';\r\n\r\nconst Weather = ({loading, name, temperature, description}) => {\r\n    if (loading) {\r\n        return <div>Loading Weather....</div>\r\n    }\r\n    return (\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <div>{description}</div>\r\n            <div>{temperature} Â°C</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    if (!state.weatherState || !state.weatherState.weather) {\r\n        return {\r\n            loading: true,\r\n        }\r\n    }\r\n    return {\r\n        name: state.weatherState.weather.name,\r\n        temperature: Math.round(state.weatherState.weather.main.temp - 273),\r\n        description: state.weatherState.weather.weather[0].description,\r\n    };\r\n}\r\n\r\nexport const ConnectedWeather = connect(mapStateToProps)(Weather);","export const  WeatherLoaded = \"weather/weatherLoaded\";\r\n\r\nexport const weatherLoaded = weather => {\r\n    return {\r\n        type: WeatherLoaded,\r\n        payload: weather,\r\n    }\r\n}","import produce from 'immer';\r\nimport {WeatherLoaded} from './actions';\r\n\r\nexport const weatherReducer = (state = {}, action) => {\r\n    return produce(state, draft => {\r\n        switch(action.type) {\r\n            case WeatherLoaded: {\r\n                draft.weather = action.payload;\r\n                break;\r\n            }\r\n            default: \r\n                return state;\r\n        }\r\n    })\r\n}","import { call, put } from 'redux-saga/effects';\r\nimport { weatherLoaded } from './actions';\r\n\r\nexport function* weatherSaga() {\r\n    yield call(loadWeatherData);\r\n}\r\n\r\nfunction* loadWeatherData() {\r\n    const url = \"https://api.openweathermap.org/data/2.5/weather?q=Seattle&APPID=1362c34423375d167d694489b1c74080\";\r\n\r\n    const response = yield call(fetch, url);\r\n    const json = yield call([response, response.json]);\r\n    yield put(weatherLoaded(json))\r\n}","import { ConnectedWeather } from './component/ComponentWeather';\r\nimport { getWeatherModule } from \"./redux/module\";\r\nimport { DynamicModuleLoader } from \"redux-dynamic-modules-react\";\r\nimport React from 'react';\r\n\r\nexport default function Dynamic() {\r\n    return (\r\n        <DynamicModuleLoader modules={[getWeatherModule()]}>\r\n            <ConnectedWeather/>\r\n        </DynamicModuleLoader>\r\n    )\r\n}\r\n","import { weatherReducer } from './reducer';\r\nimport { weatherSaga } from './sagas';\r\n\r\nexport function getWeatherModule() {\r\n    return {\r\n        id: 'weather',\r\n        reducerMap: {\r\n            weatherState: weatherReducer\r\n        },\r\n        sagas: [weatherSaga]\r\n    }\r\n}"],"sourceRoot":""}